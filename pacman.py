import networkx as nx
# Matriz do mapa do pac-man
matriz = [
    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    [2,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,2],
    [2,1,2,2,1,2,1,2,2,2,2,2,2,1,2,1,2,2,1,2],
    [2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2],
    [2,1,2,1,2,2,1,2,2,2,2,2,2,1,2,2,1,2,1,2],
    [2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,2],
    [2,1,2,1,2,2,1,2,2,2,2,2,2,1,2,2,1,2,1,2],
    [2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2],
    [2,1,2,2,1,2,1,2,2,2,2,2,2,1,2,1,2,2,1,2],
    [2,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,2],
    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
]

# Grafo do mapa do pac-man
grafo = {
    (1, 1): [(2, 1), (1, 2)], 
    (2, 1): [(1, 1), (3, 1)], 
    (1, 2): [(1, 1), (1, 3)], 
    (1, 3): [(1, 2), (1, 4)], 
    (1, 4): [(1, 3), (2, 4)], 
    (2, 4): [(1, 4), (3, 4)], 
    (1, 6): [(2, 6), (1, 7)], 
    (2, 6): [(1, 6), (3, 6)], 
    (1, 7): [(1, 6), (1, 8)], 
    (1, 8): [(1, 7), (1, 9)], 
    (1, 9): [(1, 8), (1, 10)], 
    (1, 10): [(1, 9), (1, 11)], 
    (1, 11): [(1, 10), (1, 12)], 
    (1, 12): [(1, 11), (1, 13)], 
    (1, 13): [(1, 12), (2, 13)], 
    (2, 13): [(1, 13), (3, 13)], 
    (1, 15): [(2, 15), (1, 16)], 
    (2, 15): [(1, 15), (3, 15)], 
    (1, 16): [(1, 15), (1, 17)], 
    (1, 17): [(1, 16), (1, 18)], 
    (1, 18): [(1, 17), (2, 18)], 
    (2, 18): [(1, 18), (3, 18)], 
    (3, 1): [(2, 1), (4, 1)], 
    (3, 4): [(2, 4), (3, 3), (3, 5)], 
    (3, 6): [(2, 6), (3, 5), (4, 6), (3, 7)], 
    (3, 13): [(2, 13), (3, 12), (4, 13), (3, 14)], 
    (3, 15): [(2, 15), (3, 14), (3, 16)], 
    (3, 18): [(2, 18), (4, 18)], 
    (4, 1): [(3, 1), (5, 1)], 
    (3, 3): [(4, 3), (3, 4)], 
    (4, 3): [(3, 3), (5, 3)], 
    (3, 5): [(3, 4), (3, 6)], 
    (4, 6): [(3, 6), (5, 6)], 
    (3, 7): [(3, 6), (3, 8)], 
    (3, 8): [(3, 7), (3, 9)], 
    (3, 9): [(3, 8), (3, 10)], 
    (3, 10): [(3, 9), (3, 11)], 
    (3, 11): [(3, 10), (3, 12)], 
    (3, 12): [(3, 11), (3, 13)], 
    (4, 13): [(3, 13), (5, 13)], 
    (3, 14): [(3, 13), (3, 15)], 
    (3, 16): [(3, 15), (4, 16)], 
    (4, 16): [(3, 16), (5, 16)], 
    (4, 18): [(3, 18), (5, 18)], 
    (5, 1): [(4, 1), (6, 1), (5, 2)], 
    (5, 3): [(4, 3), (5, 2), (6, 3), (5, 4)], 
    (5, 6): [(4, 6), (5, 5), (6, 6)], 
    (5, 13): [(4, 13), (6, 13), (5, 14)], 
    (5, 16): [(4, 16), (5, 15), (6, 16), (5, 17)], 
    (5, 18): [(4, 18), (5, 17), (6, 18)], 
    (6, 1): [(5, 1), (7, 1)], 
    (5, 2): [(5, 1), (5, 3)], 
    (6, 3): [(5, 3), (7, 3)], 
    (5, 4): [(5, 3), (5, 5)], 
    (5, 5): [(5, 4), (5, 6)], 
    (6, 6): [(5, 6), (7, 6)], 
    (6, 13): [(5, 13), (7, 13)], 
    (5, 14): [(5, 13), (5, 15)], 
    (5, 15): [(5, 14), (5, 16)], 
    (6, 16): [(5, 16), (7, 16)], 
    (5, 17): [(5, 16), (5, 18)], 
    (6, 18): [(5, 18), (7, 18)], 
    (7, 1): [(6, 1), (8, 1)], 
    (7, 3): [(6, 3), (7, 4)], 
    (7, 6): [(6, 6), (7, 5), (8, 6), (7, 7)], 
    (7, 13): [(6, 13), (7, 12), (8, 13), (7, 14)], 
    (7, 16): [(6, 16), (7, 15)], 
    (7, 18): [(6, 18), (8, 18)], 
    (8, 1): [(7, 1), (9, 1)], 
    (7, 4): [(7, 3), (8, 4), (7, 5)], 
    (8, 4): [(7, 4), (9, 4)], 
    (7, 5): [(7, 4), (7, 6)], 
    (8, 6): [(7, 6), (9, 6)], 
    (7, 7): [(7, 6), (7, 8)], 
    (7, 8): [(7, 7), (7, 9)], 
    (7, 9): [(7, 8), (7, 10)], 
    (7, 10): [(7, 9), (7, 11)], 
    (7, 11): [(7, 10), (7, 12)], 
    (7, 12): [(7, 11), (7, 13)], 
    (8, 13): [(7, 13), (9, 13)], 
    (7, 14): [(7, 13), (7, 15)], 
    (7, 15): [(7, 14), (8, 15), (7, 16)], 
    (8, 15): [(7, 15), (9, 15)], 
    (8, 18): [(7, 18), (9, 18)], 
    (9, 1): [(8, 1), (9, 2)], 
    (9, 4): [(8, 4), (9, 3)], 
    (9, 6): [(8, 6), (9, 7)], 
    (9, 13): [(8, 13), (9, 12)], 
    (9, 15): [(8, 15), (9, 16)], 
    (9, 18): [(8, 18), (9, 17)], 
    (9, 2): [(9, 1), (9, 3)], 
    (9, 3): [(9, 2), (9, 4)], 
    (9, 7): [(9, 6), (9, 8)], 
    (9, 8): [(9, 7), (9, 9)], 
    (9, 9): [(9, 8), (9, 10)], 
    (9, 10): [(9, 9), (9, 11)], 
    (9, 11): [(9, 10), (9, 12)], 
    (9, 12): [(9, 11), (9, 13)], 
    (9, 16): [(9, 15), (9, 17)], 
    (9, 17): [(9, 16), (9, 18)]}

# Transformando matriz em grafo
G = nx.Graph()
for i in range(len(matriz)):
    for j in range(len(matriz[i])):
        if matriz[i][j] == 1:
            G.add_node((i,j))
            if matriz[i-1][j] == 1:
                G.add_edge((i,j),(i-1,j))
            if matriz[i][j-1] == 1:
                G.add_edge((i,j),(i,j-1))
            if matriz[i+1][j] == 1:
                G.add_edge((i,j),(i+1,j))
            if matriz[i][j+1] == 1:
                G.add_edge((i,j),(i,j+1))

#Transformando em um dicionario
dic = nx.to_dict_of_lists(G)

#A partir do dic, criei o grafo

def busca_em_extensão(grafo, inicio, objetivo):
    #Define a fila de busca
    fila = [inicio]

    #Define os nós visitados
    visitados = [inicio]

    #Define o caminho a percorrer
    parentes = {}

    #Enquanto a fila não estiver vazia
    while fila:
        no = fila.pop(0)

        if no == objetivo:
            caminho = [objetivo]

            while objetivo != inicio:
                caminho.insert(0, parentes[objetivo])
                objetivo = parentes[objetivo]
            return caminho
        
        #Para cada vizinho do nó
        for vizinho in grafo[no]:
            if vizinho not in visitados:
                #Adiciona o nó como visitado
                visitados.append(vizinho)

                #Adiciona na fila
                fila.append(vizinho)

                #Adiciona o pai do vizinho sendo o nó
                parentes[vizinho] = no
            
    return False

#Busca em extensão
caminho = busca_em_extensão(dic, (7,10), (9,18))
print(caminho)